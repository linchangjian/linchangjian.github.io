<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林长健</title>
  
  <subtitle>深度研究Android相关技术栈 Android Java 插件化技术 组件化技术 Android优化技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-20T09:35:14.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>林长健</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Binder hook</title>
    <link href="http://yoursite.com/2018/06/20/Binder-hook/"/>
    <id>http://yoursite.com/2018/06/20/Binder-hook/</id>
    <published>2018-06-20T09:34:24.000Z</published>
    <updated>2018-06-20T09:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hook机制之Binder-Hook"><a href="#Hook机制之Binder-Hook" class="headerlink" title="Hook机制之Binder-Hook"></a>Hook机制之Binder-Hook</h1><p>Android系统通过Binder机制给应用程序提供了一系列的系统服务，诸如<code>ActivityManagerService</code>，<code>ClipboardManager</code>， <code>AudioManager</code>等；这些广泛存在系统服务给应用程序提供了诸如任务管理，音频，视频等异常强大的功能。</p><p>插件框架作为各个插件的管理者，为了使得插件能够<strong>无缝地</strong>使用这些系统服务，自然会对这些系统服务做出一定的改造(Hook)，使得插件的开发和使用更加方便，从而大大降低插件的开发和维护成本。比如，Hook住<code>ActivityManagerService</code>可以让插件无缝地使用<code>startActivity</code>方法而不是使用特定的方式(比如that语法)来启动插件或者主程序的任意界面。</p><p>我们把这种Hook系统服务的机制称之为Binder Hook，因为本质上这些服务提供者都是存在于系统各个进程的Binder对象。因此，要理解接下来的内容必须了解Android的Binder机制，可以参考我之前的文章<a href="http://weishu.me/2016/01/12/binder-index-for-newer/" target="_blank" rel="noopener">Binder学习指南</a></p><a id="more"></a><p>阅读本文之前，可以先clone一份 <a href="https://github.com/tiann/understand-plugin-framework" target="_blank" rel="noopener">understand-plugin-framework</a>，参考此项目的<code>binder-hook</code> 模块。另外，插件框架原理解析系列文章见<a href="概述.md">索引</a>。</p><h2 id="系统服务的获取过程"><a href="#系统服务的获取过程" class="headerlink" title="系统服务的获取过程"></a>系统服务的获取过程</h2><p>我们知道系统的各个远程service对象都是以Binder的形式存在的，而这些Binder有一个管理者，那就是<code>ServiceManager</code>；我们要Hook掉这些service，自然要从这个<code>ServiceManager</code>下手，不然星罗棋布的Binder广泛存在于系统的各个角落，要一个个找出来还真是大海捞针。</p><p>回想一下我们使用系统服务的时候是怎么干的，想必这个大家一定再熟悉不过了：通过<code>Context</code>对象的<code>getSystemService</code>方法；比如要使用<code>ActivityManager</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</span><br></pre></td></tr></table></figure><p>可是这个貌似跟<code>ServiceManager</code>没有什么关系啊？我们再查看<code>getSystemService</code>方法；(Context的实现在<code>ContextImpl</code>里面)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSystemService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    ServiceFetcher fetcher = SYSTEM_SERVICE_MAP.get(name);</span><br><span class="line">    <span class="keyword">return</span> fetcher == <span class="keyword">null</span> ? <span class="keyword">null</span> : fetcher.getService(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单，所有的service对象都保存在一张<code>map</code>里面，我们再看这个map是怎么初始化的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">registerService(ACCOUNT_SERVICE, new ServiceFetcher() &#123;</span><br><span class="line">                public Object createService(ContextImpl ctx) &#123;</span><br><span class="line">                    IBinder b = ServiceManager.getService(ACCOUNT_SERVICE);</span><br><span class="line">                    IAccountManager service = IAccountManager.Stub.asInterface(b);</span><br><span class="line">                    return new AccountManager(ctx, service);</span><br><span class="line">                &#125;&#125;);</span><br></pre></td></tr></table></figure><p>在<code>ContextImpl</code>的静态初始化块里面，有的Service是像上面这样初始化的；可以看到，确实使用了<code>ServiceManager</code>；当然还有一些service并没有直接使用<code>ServiceManager</code>，而是做了一层包装并返回了这个包装对象，比如我们的<code>ActivityManager</code>，它返回的是<code>ActivityManager</code>这个包装对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">registerService(ACTIVITY_SERVICE, new ServiceFetcher() &#123;</span><br><span class="line">                public Object createService(ContextImpl ctx) &#123;</span><br><span class="line">                    return new ActivityManager(ctx.getOuterContext(), ctx.mMainThread.getHandler());</span><br><span class="line">                &#125;&#125;);</span><br></pre></td></tr></table></figure><p>但是在<code>ActivityManager</code>这个类内部，也使用了<code>ServiceManager</code>；具体来说，因为ActivityManager里面所有的核心操作都是使用<code>ActivityManagerNative.getDefault()</code>完成的。那么这个语句干了什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            IBinder b = ServiceManager.getService(<span class="string">"activity"</span>);</span><br><span class="line">            IActivityManager am = asInterface(b);</span><br><span class="line">            <span class="keyword">return</span> am;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>因此，通过分析我们得知，系统Service的使用其实就分为两步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IBinder b = ServiceManager.getService(<span class="string">"service_name"</span>); <span class="comment">// 获取原始的IBinder对象</span></span><br><span class="line">IXXInterface in = IXXInterface.Stub.asInterface(b); <span class="comment">// 转换为Service接口</span></span><br></pre></td></tr></table></figure><h2 id="寻找Hook点"><a href="#寻找Hook点" class="headerlink" title="寻找Hook点"></a>寻找Hook点</h2><p>在<a href="Hook机制之代理Hook.md">插件框架原理解析——Hook机制之动态代理</a>里面我们说过，Hook分为三步，最关键的一步就是寻找Hook点。我们现在已经搞清楚了系统服务的使用过程，那么就需要找出在这个过程中，在哪个环节是最合适hook的。</p><p>由于系统服务的使用者都是对第二步获取到的<code>IXXInterface</code>进行操作，因此如果我们要hook掉某个系统服务，<strong>只需要把第二步的<code>asInterface</code>方法返回的对象修改为为我们Hook过的对象就可以了。</strong></p><h3 id="asInterface过程"><a href="#asInterface过程" class="headerlink" title="asInterface过程"></a>asInterface过程</h3><p>接下来我们分析<code>asInterface</code>方法，然后想办法把这个方法的返回值修改为我们Hook过的系统服务对象。这里我们以系统剪切版服务为例，源码位置为<code>android.content.IClipboard</code>,<code>IClipboard.Stub.asInterface</code>方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> android.content.<span class="function">IClipboard <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR); <span class="comment">// Hook点</span></span><br><span class="line">    <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> android.content.IClipboard))) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((android.content.IClipboard) iin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> android.content.IClipboard.Stub.Proxy(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的意思就是：先查看本进程是否存在这个Binder对象，如果有那么直接就是本进程调用了；如果不存在那么创建一个代理对象，让代理对象委托驱动完成跨进程调用。</p><p>观察这个方法，前面的那个if语句判空返回肯定动不了手脚；最后一句调用构造函数然后直接返回我们也是无从下手，要修改<code>asInterface</code>方法的返回值，我们唯一能做的就是从这一句下手：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR); // Hook点</span><br></pre></td></tr></table></figure><p>我们可以尝试修改这个<code>obj</code>对象的<code>queryLocalInterface</code>方法的返回值，并保证这个返回值符合接下来的<code>if</code>条件检测，那么就达到了修改<code>asInterface</code>方法返回值的目的。</p><p>而这个<code>obj</code>对象刚好是我们第一步返回的<code>IBinder</code>对象，接下来我们尝试对这个<code>IBinder</code>对象的<code>queryLocalInterface</code>方法进行hook。</p><h3 id="getService过程"><a href="#getService过程" class="headerlink" title="getService过程"></a>getService过程</h3><p>上文分析得知，我们想要修改<code>IBinder</code>对象的<code>queryLocalInterface</code>方法；获取<code>IBinder</code>对象的过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IBinder b = ServiceManager.getService(&quot;service_name&quot;);</span><br></pre></td></tr></table></figure><p>因此，我们希望能修改这个<code>getService</code>方法的返回值，让这个方法返回一个我们伪造过的<code>IBinder</code>对象；这样，我们可以在自己伪造的<code>IBinder</code>对象的<code>queryLocalInterface</code>方法作处理，进而使得<code>asInterface</code>方法返回在<code>queryLocalInterface</code>方法里面处理过的值，最终实现hook系统服务的目的。</p><p>在跟踪这个<code>getService</code>方法之前我们思考一下，由于系统服务是一系列的远程Service，它们的本体，也就是Binder本地对象一般都存在于某个单独的进程，在这个进程之外的其他进程存在的都是这些Binder本地对象的代理。因此在我们的进程里面，存在的也只是这个Binder代理对象，我们也只能对这些Binder代理对象下手。(如果这一段看不懂，建议不要往下看了，先看<a href="http://weishu.me/2016/01/12/binder-index-for-newer/" target="_blank" rel="noopener">Binder学习指南</a>)</p><p>然后，这个<code>getService</code>是一个静态方法，如果此方法什么都不做，拿到Binder代理对象之后直接返回；那么我们就无能为力了：我们没有办法拦截一个静态方法，也没有办法获取到这个静态方法里面的局部变量(即我们希望修改的那个Binder代理对象)。</p><p>接下来就可以看这个<code>getService</code>的代码了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IBinder <span class="title">getService</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        IBinder service = sCache.get(name);</span><br><span class="line">        <span class="keyword">if</span> (service != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> service;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getIServiceManager().getService(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"error in getService"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>天无绝人之路！<code>ServiceManager</code>为了避免每次都进行跨进程通信，把这些Binder代理对象缓存在一张<code>map</code>里面。</p><p>我们可以替换这个map里面的内容为Hook过的<code>IBinder</code>对象，由于系统在<code>getService</code>的时候每次都会优先查找缓存，因此返回给使用者的都是被我们修改过的对象，从而达到瞒天过海的目的。</p><p>总结一下，要达到修改系统服务的目的，我们需要如下两步：</p><ol><li>首先肯定需要<strong>伪造一个系统服务对象</strong>，接下来就要想办法让<code>asInterface</code>能够返回我们的这个伪造对象而不是原始的系统服务对象。</li><li>通过上文分析我们知道，只要让<code>getService</code>返回<code>IBinder</code>对象的<code>queryLocalInterface</code>方法直接返回我们伪造过的系统服务对象就能达到目的。所以，我们需要<strong>伪造一个IBinder对象</strong>，主要是修改它的<code>queryLocalInterface</code>方法，让它返回我们伪造的系统服务对象；然后把这个伪造对象放置在<code>ServiceManager</code>的缓存<code>map</code>里面即可。</li></ol><p>我们通过Binder机制的<em>优先查找本地Binder对象</em>的这个特性达到了Hook掉系统服务对象的目的。因此<code>queryLocalInterface</code>也失去了它原本的意义(只查找本地Binder对象，没有本地对象返回null)，这个方法只是一个傀儡，是我们实现hook系统对象的桥梁：我们通过这个“漏洞”让<code>asInterface</code>永远都返回我们伪造过的对象。由于我们接管了<code>asInterface</code>这个方法的全部，我们伪造过的这个系统服务对象不能是只拥有本地Binder对象(原始<code>queryLocalInterface</code>方法返回的对象)的能力，还要有Binder代理对象操纵驱动的能力。</p><p>接下来我们就以Hook系统的剪切版服务为例，用实际代码来说明，如何Hook掉系统服务。</p><h2 id="Hook系统剪切版服务"><a href="#Hook系统剪切版服务" class="headerlink" title="Hook系统剪切版服务"></a>Hook系统剪切版服务</h2><h3 id="伪造剪切版服务对象"><a href="#伪造剪切版服务对象" class="headerlink" title="伪造剪切版服务对象"></a>伪造剪切版服务对象</h3><p>首先我们用代理的方式伪造一个剪切版服务对象，关于如何使用代理的方式进行hook以及其中的原理，可以查看<a href="Hook机制之代理Hook.md">插件框架原理解析——Hook机制之动态代理</a>。</p><p>具体代码如下，我们用动态代理的方式Hook掉了<code>hasPrimaryClip()</code>，<code>getPrimaryClip()</code>这两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinderHookHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BinderHookHandler"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原始的Service对象 (IInterface)</span></span><br><span class="line">    Object base;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinderHookHandler</span><span class="params">(IBinder base, Class&lt;?&gt; stubClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method asInterfaceMethod = stubClass.getDeclaredMethod(<span class="string">"asInterface"</span>, IBinder.class);</span><br><span class="line">            <span class="comment">// IClipboard.Stub.asInterface(base);</span></span><br><span class="line">            <span class="keyword">this</span>.base = asInterfaceMethod.invoke(<span class="keyword">null</span>, base);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"hooked failed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.HONEYCOMB)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把剪切版的内容替换为 "you are hooked"</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"getPrimaryClip"</span>.equals(method.getName())) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"hook getPrimaryClip"</span>);</span><br><span class="line">            <span class="keyword">return</span> ClipData.newPlainText(<span class="keyword">null</span>, <span class="string">"you are hooked"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 欺骗系统,使之认为剪切版上一直有内容</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"hasPrimaryClip"</span>.equals(method.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> method.invoke(base, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，我们拿到原始的<code>IBinder</code>对象之后，如果我们希望使用被Hook之前的系统服务，并不能直接使用这个<code>IBinder</code>对象，而是需要使用<code>asInterface</code>方法将它转换为<code>IClipboard</code>接口；因为<code>getService</code>方法返回的<code>IBinder</code>实际上是一个<strong>裸Binder代理对象</strong>，它只有与驱动打交道的能力，但是它并不能独立工作，需要人指挥它；<code>asInterface</code>方法返回的<code>IClipboard.Stub.Proxy</code>类的对象通过操纵这个裸<code>BinderProxy</code>对象从而实现了具体的<code>IClipboard</code>接口定义的操作。</p><h3 id="伪造IBinder-对象"><a href="#伪造IBinder-对象" class="headerlink" title="伪造IBinder 对象"></a>伪造<code>IBinder</code> 对象</h3><p>在上一步中，我们已经伪造好了系统服务对象，现在要做的就是想办法让<code>asInterface</code>方法返回我们伪造的对象了；我们伪造一个<code>IBinder</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinderProxyHookHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BinderProxyHookHandler"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绝大部分情况下,这是一个BinderProxy对象</span></span><br><span class="line">    <span class="comment">// 只有当Service和我们在同一个进程的时候才是Binder本地对象</span></span><br><span class="line">    <span class="comment">// 这个基本不可能</span></span><br><span class="line">    IBinder base;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; stub;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; iinterface;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinderProxyHookHandler</span><span class="params">(IBinder base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base = base;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.stub = Class.forName(<span class="string">"android.content.IClipboard$Stub"</span>);</span><br><span class="line">            <span class="keyword">this</span>.iinterface = Class.forName(<span class="string">"android.content.IClipboard"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"queryLocalInterface"</span>.equals(method.getName())) &#123;</span><br><span class="line"></span><br><span class="line">            Log.d(TAG, <span class="string">"hook queryLocalInterface"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这里直接返回真正被Hook掉的Service接口</span></span><br><span class="line">            <span class="comment">// 这里的 queryLocalInterface 就不是原本的意思了</span></span><br><span class="line">            <span class="comment">// 我们肯定不会真的返回一个本地接口, 因为我们接管了 asInterface方法的作用</span></span><br><span class="line">            <span class="comment">// 因此必须是一个完整的 asInterface 过的 IInterface对象, 既要处理本地对象,也要处理代理对象</span></span><br><span class="line">            <span class="comment">// 这只是一个Hook点而已, 它原始的含义已经被我们重定义了; 因为我们会永远确保这个方法不返回null</span></span><br><span class="line">            <span class="comment">// 让 IClipboard.Stub.asInterface 永远走到if语句的else分支里面</span></span><br><span class="line">            <span class="keyword">return</span> Proxy.newProxyInstance(proxy.getClass().getClassLoader(),</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// asInterface 的时候会检测是否是特定类型的接口然后进行强制转换</span></span><br><span class="line">                    <span class="comment">// 因此这里的动态代理生成的类型信息的类型必须是正确的</span></span><br><span class="line">                    <span class="keyword">new</span> Class[] &#123; IBinder.class, IInterface.class, <span class="keyword">this</span>.iinterface &#125;,</span><br><span class="line">                    <span class="keyword">new</span> BinderHookHandler(base, stub));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"method:"</span> + method.getName());</span><br><span class="line">        <span class="keyword">return</span> method.invoke(base, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用动态代理的方式伪造了一个跟原始<code>IBinder</code>一模一样的对象，然后在这个伪造的<code>IBinder</code>对象的<code>queryLocalInterface</code>方法里面返回了我们第一步创建的<strong>伪造过的系统服务对象</strong>；注意看注释，详细解释可以看<a href="https://github.com/tiann/understand-plugin-framework" target="_blank" rel="noopener">代码</a></p><h3 id="替换ServiceManager的IBinder对象"><a href="#替换ServiceManager的IBinder对象" class="headerlink" title="替换ServiceManager的IBinder对象"></a>替换ServiceManager的<code>IBinder</code>对象</h3><p>现在就是万事具备，只欠东风了；我们使用反射的方式修改<code>ServiceManager</code>类里面缓存的Binder对象，使得<code>getService</code>方法返回我们伪造的<code>IBinder</code>对象，进而<code>asInterface</code>方法使用伪造<code>IBinder</code>对象的<code>queryLocalInterface</code>方法返回了我们伪造的系统服务对象。代码较简单，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String CLIPBOARD_SERVICE = <span class="string">"clipboard"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这一段的意思实际就是: ServiceManager.getService("clipboard");</span></span><br><span class="line"><span class="comment">// 只不过 ServiceManager这个类是@hide的</span></span><br><span class="line">Class&lt;?&gt; serviceManager = Class.forName(<span class="string">"android.os.ServiceManager"</span>);</span><br><span class="line">Method getService = serviceManager.getDeclaredMethod(<span class="string">"getService"</span>, String.class);</span><br><span class="line"><span class="comment">// ServiceManager里面管理的原始的Clipboard Binder对象</span></span><br><span class="line"><span class="comment">// 一般来说这是一个Binder代理对象</span></span><br><span class="line">IBinder rawBinder = (IBinder) getService.invoke(<span class="keyword">null</span>, CLIPBOARD_SERVICE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hook 掉这个Binder代理对象的 queryLocalInterface 方法</span></span><br><span class="line"><span class="comment">// 然后在 queryLocalInterface 返回一个IInterface对象, hook掉我们感兴趣的方法即可.</span></span><br><span class="line">IBinder hookedBinder = (IBinder) Proxy.newProxyInstance(serviceManager.getClassLoader(),</span><br><span class="line">        <span class="keyword">new</span> Class&lt;?&gt;[] &#123; IBinder.class &#125;,</span><br><span class="line">        <span class="keyword">new</span> BinderProxyHookHandler(rawBinder));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把这个hook过的Binder代理对象放进ServiceManager的cache里面</span></span><br><span class="line"><span class="comment">// 以后查询的时候 会优先查询缓存里面的Binder, 这样就会使用被我们修改过的Binder了</span></span><br><span class="line">Field cacheField = serviceManager.getDeclaredField(<span class="string">"sCache"</span>);</span><br><span class="line">cacheField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Map&lt;String, IBinder&gt; cache = (Map) cacheField.get(<span class="keyword">null</span>);</span><br><span class="line">cache.put(CLIPBOARD_SERVICE, hookedBinder);</span><br></pre></td></tr></table></figure><p>接下来，在app里面使用剪切版，比如长按进行粘贴之后，剪切版的内容永远都是<code>you are hooked</code>了；这样，我们Hook系统服务的目的宣告完成！详细的代码参见 <a href="https://github.com/tiann/understand-plugin-framework" target="_blank" rel="noopener">github</a>。</p><p>也许你会问，插件框架会这么hook吗？如果不是那么插件框架hook这些干什么？插件框架当然不会做替换文本这么无聊的事情，DroidPlugin插件框架管理插件使得插件就像是主程序一样，因此插件需要使用主程序的剪切版，插件之间也会共用剪切版；其他的一些系统服务也类似，这样就可以达到插件和宿主程序之间的天衣服缝，水乳交融！另外，<code>ActivityManager</code>以及<code>PackageManager</code>这两个系统服务虽然也可以通过这种方式hook，但是由于它们的重要性和特殊性，DroidPlugin使用了另外一种方式，我们会单独讲解。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hook机制之Binder-Hook&quot;&gt;&lt;a href=&quot;#Hook机制之Binder-Hook&quot; class=&quot;headerlink&quot; title=&quot;Hook机制之Binder-Hook&quot;&gt;&lt;/a&gt;Hook机制之Binder-Hook&lt;/h1&gt;&lt;p&gt;Android系统通过Binder机制给应用程序提供了一系列的系统服务，诸如&lt;code&gt;ActivityManagerService&lt;/code&gt;，&lt;code&gt;ClipboardManager&lt;/code&gt;， &lt;code&gt;AudioManager&lt;/code&gt;等；这些广泛存在系统服务给应用程序提供了诸如任务管理，音频，视频等异常强大的功能。&lt;/p&gt;
&lt;p&gt;插件框架作为各个插件的管理者，为了使得插件能够&lt;strong&gt;无缝地&lt;/strong&gt;使用这些系统服务，自然会对这些系统服务做出一定的改造(Hook)，使得插件的开发和使用更加方便，从而大大降低插件的开发和维护成本。比如，Hook住&lt;code&gt;ActivityManagerService&lt;/code&gt;可以让插件无缝地使用&lt;code&gt;startActivity&lt;/code&gt;方法而不是使用特定的方式(比如that语法)来启动插件或者主程序的任意界面。&lt;/p&gt;
&lt;p&gt;我们把这种Hook系统服务的机制称之为Binder Hook，因为本质上这些服务提供者都是存在于系统各个进程的Binder对象。因此，要理解接下来的内容必须了解Android的Binder机制，可以参考我之前的文章&lt;a href=&quot;http://weishu.me/2016/01/12/binder-index-for-newer/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Binder学习指南&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android插件化框架系列</title>
    <link href="http://yoursite.com/2018/06/20/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97/"/>
    <id>http://yoursite.com/2018/06/20/Android插件化框架系列/</id>
    <published>2018-06-20T08:05:58.000Z</published>
    <updated>2018-06-20T08:05:58.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>My New post</title>
    <link href="http://yoursite.com/2018/06/20/My-New-post/"/>
    <id>http://yoursite.com/2018/06/20/My-New-post/</id>
    <published>2018-06-20T07:53:35.000Z</published>
    <updated>2018-06-20T07:53:35.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/06/20/hello-world/"/>
    <id>http://yoursite.com/2018/06/20/hello-world/</id>
    <published>2018-06-20T02:50:33.000Z</published>
    <updated>2018-06-20T02:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
